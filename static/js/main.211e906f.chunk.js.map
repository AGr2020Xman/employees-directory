{"version":3,"sources":["components/TableHeader/TableHeader.js","components/TableData/TableData.js","utils/employeeAPI.js","components/Search/Search.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","headers","handleSortByName","handleSortByDob","handleSortByEmail","handleSortByPhone","className","map","heading","text","onClick","TableData","data","meta","m","key","employee","alt","src","picture","name","phone","email","dob","axios","get","Search","onSearch","searchTerm","value","type","onChange","placeholder","Header","sort","App","useState","headerMeta","employees","setEmployees","Name","Email","DOB","Phone","sorted","setSorted","setSearchTerm","useEffect","a","API","then","res","results","id","catch","err","console","log","populateData","formatEmployeeData","person","medium","first","last","dateFormat","date","toComparableNumber","numStr","split","part1","parseInt","toComparableDate","dateStr","day","month","year","Date","filteredEmployees","b","filter","toLowerCase","includes","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.211e906f.chunk.js","sourcesContent":["import React from \"react\";\nimport './tableheader.css';\n\nexport default function TableHeader({ headers, handleSortByName, handleSortByDob, handleSortByEmail, handleSortByPhone }) {\n  return (\n        <tr className=\"tr-header\">\n          {headers.map((heading) => {\n            switch(heading.text) {\n              case 'Name':\n                return (\n                  <th onClick={handleSortByName} className=\"sortable-th\">\n                {heading.text}<i className=\"fas fa-sort\"></i>\n              </th>\n                );\n                \n                case 'Email':\n                return (\n                  <th onClick={handleSortByEmail} className=\"sortable-th\">\n                {heading.text}<i className=\"fa fa-fw fa-sort\"></i>\n              </th>\n                );\n                case 'D.O.B':\n                return (\n                  <th onClick={handleSortByDob} className=\"sortable-th\">\n                {heading.text}<i className=\"fa fa-fw fa-sort\"></i>\n              </th>\n                ); \n                case 'Phone':\n                return (\n                  <th onClick={handleSortByPhone} className=\"sortable-th\">\n                {heading.text}<i className=\"fa fa-fw fa-sort\"></i>\n              </th>\n                );\n                default:\n                  return (\n                    <th className=\"sortable-th\">\n                      {heading.text}\n                    </th>\n                  )\n            }\n          })}\n        </tr>\n  )}","import React from \"react\";\n\nexport default function TableData({ data, meta }) {\n  const headerOrder = meta.map(m => m.key);\n\n  return (\n    <tbody>\n        {data.map((employee) => {\n          return (\n        <tr className='data-row' key={employee.email}>\n        <td>\n          <img alt='profile' src={employee.picture}/>\n        </td>\n          <td>{employee.name}</td>\n          <td>{employee.phone}</td>\n          <td>{employee.email}</td>\n          <td>{employee.dob}</td>\n  </tr>\n    )\n  })}\n      </tbody> \n  )};","import axios from \"axios\";\n\nexport default {\n  getEmployees: function () {\n    return axios.get(\n      \"https://randomuser.me/api/?results=50&inc=name,phone,picture,email,dob&nat=au\"\n    );\n  }, \n};\n","import React from \"react\";\nimport './search.css';\n\nconst Search = ({ onSearch, searchTerm }) => {\n\n  return (\n    <div className=\"container form\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 justify-content-center d-flex\">\n          <input\n            value={searchTerm}\n            type=\"text\"\n            className=\"form-control\"\n            onChange={onSearch}\n            placeholder=\"Search employees\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search; \n","import React from \"react\";\nimport './header.css';\n\nexport default function Header() {\n  return (\n    <header className=\"header text-center\">\n      <h2>Employee Directory</h2>\n      <p>\n        Click on carrots to filter by heading or use the search box to narrow\n        your results\n      </p>\n    </header>\n  );\n};","import React, { useState, useEffect } from \"react\";\nimport TableHeader from \"./components/TableHeader/TableHeader\";\nimport TableData from \"./components/TableData/TableData\";\nimport API from './utils/employeeAPI'\nimport dateFormat from 'dateformat';\nimport Search from './components/Search/Search';\nimport Header from './components/Header/Header';\nimport './App.css';\n\nconst meta = [\n  {\n    key: \"id\",\n    text: \"ID\",\n    sort: true,\n  }, \n  {\n    key: \"name\",\n    text: \"Name\",\n    sort: true,\n  },\n  {\n    key: \"phone\",\n    text: \"Phone\",\n    sort: true,\n  },\n  {\n    key: \"email\",\n    text: \"Email\",\n    sort: true,\n  },\n  {\n    key: \"dob\",\n    text: \"D.O.B\",\n    sort: true,\n  },\n];\n\nexport const App = () => {\n  const [headerMeta, setHeaderMeta] = useState(meta);\n  const [employees, setEmployees] = useState([]);\n  const [sorted, setSorted] = useState({\n    Name: false,\n    Email: null,\n    DOB: null,\n    Phone: null\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    const populateData = async () => {\n      API.getEmployees()\n        .then((res) => {\n          setEmployees(res.data.results);\n          employees.map((data, id) => {\n            return setEmployees({ ...data, id });\n          });\n          // setFilteredEmployees(employees);\n        })\n        .catch((err) => console.log(err));\n    };\n    populateData();\n  }, []);\n\n  let formatEmployeeData = employees.map((person) => {\n    let { name, email, dob, phone, picture } = person\n    return ({\n      picture: picture.medium,\n      name: name.first + ' ' + name.last,\n      email: email,\n      phone: phone,\n      dob: dateFormat(dob.date, \"dd/mm/yyyy\")\n    })\n  })\n  \n  const handleSortByName = () => {\n    // sort array ascending or descending by first name\n    // console.log('Sorting by name');\n    if (!sorted.Name) {\n        formatEmployeeData.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        setSorted({Name: true, Email: null, DOB: null, Phone: null});\n        console.log(sorted);\n    } else {\n      formatEmployeeData.sort((a, b) => (a.name > b.name) ? -1 : 1);\n        setSorted({Name: false, Email: null, DOB: null, Phone: null});\n    }\n}\n\nconst toComparableNumber = (numStr) => {\n  const [part1, part2, part3] = numStr.split(\"-\");\n  const newNumber = part1;\n  // console.log(newNumber);\n  return parseInt(newNumber);\n}\n\nconst handleSortByPhone = () => {\n  // sort array ascending or descending by phone\n  if (!sorted.Phone) {\n      formatEmployeeData.sort((a, b) => (toComparableNumber(a.phone) > toComparableNumber(b.phone)) ? 1 : -1);\n      setSorted({Phone: true, Email: null, DOB: null, Name: null});\n      console.log(sorted);\n  } else {\n    formatEmployeeData.sort((a, b) => (toComparableNumber(a.phone) > toComparableNumber(b.phone)) ? -1 : 1);\n      setSorted({Phone: false, Email: null, DOB: null, Name: null});\n  }\n}\n\nconst toComparableDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"/\")\n  return new Date(year, month - 1, day)\n}\n\nconst handleSortByDob = ()  => {\n    // sort array ascending or descending by dob\n    if (!sorted.DOB) {\n      formatEmployeeData.sort((a, b) => (toComparableDate(a.dob) > toComparableDate(b.dob)) ? 1 : -1);\n        setSorted({DOB: true, Name: null, Email: null, Phone: null});\n      console.log(sorted);\n    } else {\n      formatEmployeeData.sort((a, b) => (toComparableDate(a.dob) > toComparableDate(b.dob)) ? -1 : 1);\n        setSorted({DOB: false, Name: null, Email: null, Phone: null});\n    }\n}\n\nconst handleSortByEmail = () => {\n  // sort array ascending or descending by email\n  if (!sorted.Email) {\n      formatEmployeeData.sort((a, b) => (a.email > b.email) ? 1 : -1);\n      setSorted({Email: true, Name: null, DOB: null, Phone: null});\n      console.log(sorted);\n  } else {\n      formatEmployeeData.sort((a, b) => (a.email > b.email) ? -1 : 1);\n      setSorted({Email: false, Name: null, DOB: null, Phone: null});\n  }\n}\n\n  const handleSearchTerm = (event) => {\n    setSearchTerm(event.target.value)\n  }\n\n  const sortedEmployees = function() {\n  if (!sorted.Name && sorted.Email === null  && sorted.DOB === null && sorted.Phone === null) {\n    return formatEmployeeData.sort((a, b) => (a.name > b.name) ? 1 : -1) \n  } else if (sorted.Name && sorted.Email === null && sorted.DOB === null && sorted.Phone === null) { \n    return formatEmployeeData.sort((a, b) => (a.name > b.name) ? -1 : 1);\n  } else if (!sorted.Email && sorted.Name === null && sorted.DOB === null && sorted.Phone === null) {\n    return formatEmployeeData.sort((a, b) => (a.email > b.email) ? 1 : -1)\n  } else if (sorted.Email && sorted.Name === null && sorted.DOB === null && sorted.Phone === null) {\n    return formatEmployeeData.sort((a, b) => (a.email > b.email) ? -1 : 1)\n  } else if (!sorted.DOB && sorted.Name === null && sorted.Email === null && sorted.Phone === null) {\n    return formatEmployeeData.sort((a, b) => (toComparableDate(a.dob) > toComparableDate(b.dob)) ? 1 : -1)\n  } else if (sorted.DOB && sorted.Name === null && sorted.Email === null && sorted.Phone === null) {\n    return formatEmployeeData.sort((a, b) => (toComparableDate(a.dob) > toComparableDate(b.dob)) ? -1 : 1)\n  } else if (!sorted.Phone && sorted.Email === null && sorted.Name === null && sorted.DOB === null) {\n    return formatEmployeeData.sort((a, b) => toComparableNumber(a.phone) > toComparableNumber(b.phone) ? 1 : -1)\n  } else if (sorted.Phone && sorted.Email === null && sorted.Name === null && sorted.DOB === null) {\n    return formatEmployeeData.sort((a, b) => toComparableNumber(a.phone) > toComparableNumber(b.phone) ? -1 : 1)\n  }\n  };\n\n  // singular test cases\n// const sortedEmployees = sorted.Phone ? formatEmployeeData.sort((a, b) => toComparableNumber(a.phone) > toComparableNumber(b.phone) ? 1:-1) : formatEmployeeData.sort((a, b) => toComparableNumber(a.phone) > toComparableNumber(b.phone) ? -1:1)\n  // const sortedEmployees = sorted.Name ? formatEmployeeData.sort((a, b) => (a.name > b.name) ? 1 : -1) : formatEmployeeData.sort((a, b) => (a.name > b.name) ? -1 : 1);\n  // const sortedEmployees = sorted.Email ? formatEmployeeData.sort((a, b) => (a.email > b.email) ? 1 : -1) : formatEmployeeData.sort((a, b) => (a.email > b.email) ? -1 : 1);\n\n  const filteredEmployees = sortedEmployees().filter((employee) => {\n    return(\n      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.name.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n  });\n\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Search onSearch={handleSearchTerm} searchTerm={searchTerm}/>\n    <table className=\"table-container table table-striped\">    \n      <TableHeader \n        headers={headerMeta} \n        handleSortByName={handleSortByName} \n        handleSortByEmail={handleSortByEmail} \n        handleSortByDob={handleSortByDob} \n        handleSortByPhone={handleSortByPhone}\n      />\n      <TableData data={filteredEmployees} meta={meta} />\n    </table>\n    </div>\n  );\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    } \n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n); \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}